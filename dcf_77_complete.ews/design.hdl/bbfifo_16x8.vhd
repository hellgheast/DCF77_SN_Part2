--------------------------------------------------------------------------------
--
-- This VHDL file was generated by EASE/HDL 8.0 Revision 2 from HDL Works B.V.
--
-- Ease library  : design_dcf_complete
-- HDL library   : design_dcf_complete
-- Host name     : INF13-BENSALAHM
-- User name     : mohammed.bensalah
-- Time stamp    : Sun Jun 07 20:13:05 2015
--
-- Designed by   : 
-- Company       : 
-- Project info  : 
--
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- Object        : Entity design_dcf_complete.bbfifo_16x8
-- Last modified : Sat Jun 06 15:29:37 2015.
--------------------------------------------------------------------------------



library ieee, unisim;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.std_logic_arith.ALL;
use ieee.std_logic_unsigned.ALL;
use unisim.VCOMPONENTS.ALL;

entity bbfifo_16x8 is
  port (
    data_in      : in     std_logic_vector(7 downto 0);
    data_out     : out    std_logic_vector(7 downto 0);
    reset        : in     std_logic;
    write        : in     std_logic;
    read         : in     std_logic;
    full         : out    std_logic;
    half_full    : out    std_logic;
    data_present : out    std_logic;
    clk          : in     std_logic);
end entity bbfifo_16x8;

--------------------------------------------------------------------------------
-- Object        : Architecture design_dcf_complete.bbfifo_16x8.low_level_definition
-- Last modified : Sat Jun 06 15:29:37 2015.
--------------------------------------------------------------------------------

architecture low_level_definition of bbfifo_16x8 is

  signal pointer             : std_logic_vector(3 downto 0);
  signal next_count          : std_logic_vector(3 downto 0);
  signal half_count          : std_logic_vector(3 downto 0);
  signal count_carry         : std_logic_vector(2 downto 0);
  signal pointer_zero        : std_logic;
  signal pointer_full        : std_logic;
  signal decode_data_present : std_logic;
  signal data_present_int    : std_logic;
  signal valid_write         : std_logic;
  attribute INIT : string;
  attribute INIT of zero_lut      : label is "0001";
  attribute INIT of full_lut      : label is "8000";
  attribute INIT of dp_lut        : label is "BFA0";
  attribute INIT of valid_lut     : label is "C4";

begin
  half_full <= pointer((3));
  full <= pointer_full;
  data_present <= data_present_int;
  data_width_loop: for i in 0 to 7 generate
      attribute INIT : string;
      attribute INIT of data_srl : label is "0000";

  begin

      data_srl: SRL16E
        generic map(
          INIT => X"0000")
        port map(
          Q   => data_out(i),
          A0  => pointer(0),
          A1  => pointer(1),
          A2  => pointer(2),
          A3  => pointer(3),
          CE  => valid_write,
          CLK => clk,
          D   => data_in(i));
  end generate data_width_loop;
  count_width_loop: for i in 0 to 3 generate
      attribute INIT : string;
      attribute INIT of count_lut : label is "6606";

  begin
      lsb_count: if (i = 0) generate
      begin

          count_muxcy: MUXCY
            port map(
              O  => count_carry(i),
              CI => valid_write,
              DI => pointer(i),
              S  => half_count(i));

          count_xor: XORCY
            port map(
              O  => next_count(i),
              CI => valid_write,
              LI => half_count(i));
      end generate lsb_count;
      mid_count: if ((i > 0) and (i < 3)) generate
      begin

          count_muxcy: MUXCY
            port map(
              O  => count_carry(i),
              CI => count_carry(i-1),
              DI => pointer(i),
              S  => half_count(i));

          count_xor: XORCY
            port map(
              O  => next_count(i),
              CI => count_carry(i-1),
              LI => half_count(i));
      end generate mid_count;
      upper_count: if (i = 3) generate
      begin

          count_xor: XORCY
            port map(
              O  => next_count(i),
              CI => count_carry(i-1),
              LI => half_count(i));
      end generate upper_count;

      register_bit: FDRE
        generic map(
          INIT => '0')
        port map(
          Q  => pointer(i),
          C  => clk,
          CE => data_present_int,
          D  => next_count(i),
          R  => reset);

      count_lut: LUT4
        generic map(
          INIT => X"0000")
        port map(
          O  => half_count(i),
          I0 => pointer(i),
          I1 => read,
          I2 => pointer_zero,
          I3 => write);
  end generate count_width_loop;

  zero_lut: LUT4
    generic map(
      INIT => X"0000")
    port map(
      O  => pointer_zero,
      I0 => pointer(0),
      I1 => pointer(1),
      I2 => pointer(2),
      I3 => pointer(3));

  full_lut: LUT4
    generic map(
      INIT => X"0000")
    port map(
      O  => pointer_full,
      I0 => pointer(0),
      I1 => pointer(1),
      I2 => pointer(2),
      I3 => pointer(3));

  dp_lut: LUT4
    generic map(
      INIT => X"0000")
    port map(
      O  => decode_data_present,
      I0 => write,
      I1 => read,
      I2 => pointer_zero,
      I3 => data_present_int);

  dp_flop: FDR
    generic map(
      INIT => '0')
    port map(
      Q => data_present_int,
      C => clk,
      D => decode_data_present,
      R => reset);

  valid_lut: LUT3
    generic map(
      INIT => X"00")
    port map(
      O  => valid_write,
      I0 => pointer_full,
      I1 => write,
      I2 => read);
end architecture low_level_definition ; -- of bbfifo_16x8

