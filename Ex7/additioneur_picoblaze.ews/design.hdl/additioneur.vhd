--------------------------------------------------------------------------------
--
-- This VHDL file was generated by EASE/HDL 8.0 Revision 2 from HDL Works B.V.
--
-- Ease library  : design
-- HDL library   : design
-- Host name     : NE-EIN-138-00
-- User name     : yves.meyer
-- Time stamp    : Wed Dec 11 15:16:27 2013
--
-- Designed by   : Y.Meyer
-- Company       : Haute Ecole ARC
-- Project info  : Additionneur PicoBlaze
--
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- Object        : Entity design.additioneur
-- Last modified : Wed Mar 21 13:19:38 2012.
--------------------------------------------------------------------------------



library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;

entity additioneur is
  port (
    carry_out : out    std_logic;
    clk       : in     std_logic;
    nombre1   : in     std_logic_vector(7 downto 0);
    nombre2   : in     std_logic_vector(7 downto 0);
    reset_n   : in     std_logic;
    resultat  : out    std_logic_vector(7 downto 0));
end entity additioneur;

--------------------------------------------------------------------------------
-- Object        : Architecture design.additioneur.structure
-- Last modified : Wed Mar 21 13:19:38 2012.
--------------------------------------------------------------------------------

architecture structure of additioneur is

  signal address       : std_logic_vector(9 downto 0);
  signal write_strobe  : std_logic;
  signal out_port      : std_logic_vector(7 downto 0);
  signal read_strobe   : std_logic;
  signal interrupt_ack : std_logic;
  signal u0_port_id    : std_logic_vector(7 downto 0);
  signal in_port       : std_logic_vector(7 downto 0);
  signal reset         : std_logic;
  signal interrupt     : std_logic;
  signal instruction   : std_logic_vector(17 downto 0);

  component interfaces
    port (
      clk           : in     std_logic;
      in_port       : out    std_logic_vector(7 downto 0);
      interrupt     : out    std_logic;
      interrupt_ack : in     std_logic;
      nombre1       : in     std_logic_vector(7 downto 0);
      nombre2       : in     std_logic_vector(7 downto 0);
      port_id       : in     std_logic_vector(7 downto 0);
      read_strobe   : in     std_logic;
      reset         : out    std_logic;
      reset_n       : in     std_logic);
  end component interfaces;

  component program
    port (
      instruction : out    std_logic_vector(17 downto 0);
      address     : in     std_logic_vector(9 downto 0);
      clk         : in     std_logic);
  end component program;

  component registres
    port (
      carry_out    : out    std_logic;
      clk          : in     std_logic;
      out_port     : in     std_logic_vector(7 downto 0);
      port_id      : in     std_logic_vector(7 downto 0);
      reset_n      : in     std_logic;
      resultat     : out    std_logic_vector(7 downto 0);
      write_strobe : in     std_logic);
  end component registres;

  component kcpsm3
    port (
      address       : out    std_logic_vector(9 downto 0);
      instruction   : in     std_logic_vector(17 downto 0);
      port_id       : out    std_logic_vector(7 downto 0);
      write_strobe  : out    std_logic;
      out_port      : out    std_logic_vector(7 downto 0);
      read_strobe   : out    std_logic;
      in_port       : in     std_logic_vector(7 downto 0);
      interrupt     : in     std_logic;
      interrupt_ack : out    std_logic;
      reset         : in     std_logic;
      clk           : in     std_logic);
  end component kcpsm3;

begin
  --MUX
  --nombre1 = Address X"01"
  --nombre2 = Address X"02"
  --reset <= NOT reset_n;
  --interrupt < = '0';
  --Registres WRITE
  --resultat = Address X"03"
  --carry out = Address X"04"

  u1: interfaces
    port map(
      clk           => clk,
      in_port       => in_port,
      interrupt     => interrupt,
      interrupt_ack => interrupt_ack,
      nombre1       => nombre1,
      nombre2       => nombre2,
      port_id       => u0_port_id,
      read_strobe   => read_strobe,
      reset         => reset,
      reset_n       => reset_n);

  u2: program
    port map(
      instruction => instruction,
      address     => address,
      clk         => clk);

  u3: registres
    port map(
      carry_out    => carry_out,
      clk          => clk,
      out_port     => out_port,
      port_id      => u0_port_id,
      reset_n      => reset_n,
      resultat     => resultat,
      write_strobe => write_strobe);

  u0: kcpsm3
    port map(
      address       => address,
      instruction   => instruction,
      port_id       => u0_port_id,
      write_strobe  => write_strobe,
      out_port      => out_port,
      read_strobe   => read_strobe,
      in_port       => in_port,
      interrupt     => interrupt,
      interrupt_ack => interrupt_ack,
      reset         => reset,
      clk           => clk);
end architecture structure ; -- of additioneur

