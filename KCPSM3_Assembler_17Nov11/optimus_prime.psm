;Déclaration des constantes

;Registre de l'IP DCF77
CONSTANT DCF_BITCOUNT,	01 ;Registre Bitcount du DCF77
CONSTANT DCF_STATUS,	02 ;Registre Status
CONSTANT DCF_PRSCL,		03 ;
CONSTANT DCF_PRSCH,		04 ;
CONSTANT DCF_FLAGS,		05 ;
CONSTANT DCF_HOUR,		06 ;
CONSTANT DCF_MINUTES,	07 ;
CONSTANT DCF_DMONTH,	08 ;
CONSTANT DCF_DWEEK,		09 ;
CONSTANT DCF_MYEAR,		0A ;
CONSTANT DCF_YEAR,		0B ;

;Registre de l'affichage
CONSTANT DSP_BCOUNT,	10 ;
CONSTANT DSP_HOUR,		11 ;
CONSTANT DSP_MIN,		12 ;
CONSTANT DSP_DEBUG,		13 ;
CONSTANT DSP_STATUS,	14 ;

;Adresse du multiplexeur
CONSTANT M_TEST,		21;
CONSTANT M_BUFULL,		22;

;Adresse Uart
CONSTANT UART_ENABLE,	30 ;


;Table à ski standard
CONSTANT CHAR_NULL,			00;
CONSTANT CHAR_SOH,			01;
CONSTANT CHAR_STX,			02;
CONSTANT CHAR_ETX,			03;
CONSTANT CHAR_EOT,			04;
CONSTANT CHAR_ENQ,			05;
CONSTANT CHAR_ACK,			06;
CONSTANT CHAR_BEL,			07;
CONSTANT CHAR_BS,			08;
CONSTANT CHAR_TAB,			09;
CONSTANT CHAR_LF,			0A;
CONSTANT CHAR_VT,			0B;
CONSTANT CHAR_FF,			0C;
CONSTANT CHAR_CR,			0D;
CONSTANT CHAR_S0,			0E;
CONSTANT CHAR_SI,			0F;
CONSTANT CHAR_DLE,			10;
CONSTANT CHAR_DC1,			11;
CONSTANT CHAR_DC2,			12;
CONSTANT CHAR_DC3,			13;
CONSTANT CHAR_DC4,			14;
CONSTANT CHAR_NAK,			15;
CONSTANT CHAR_SYN,			16;
CONSTANT CHAR_ETB,			17;
CONSTANT CHAR_CAN,			18;
CONSTANT CHAR_EM,			19;
CONSTANT CHAR_SUB,			1A;
CONSTANT CHAR_ESC,			1B;
CONSTANT CHAR_FS,			1C;
CONSTANT CHAR_GS,			1D;
CONSTANT CHAR_RS,			1E;
CONSTANT CHAR_US,			1F;
CONSTANT CHAR_SPC,			20;
CONSTANT CHAR_POINT,		2E;
CONSTANT CHAR_comma,		2C;
CONSTANT CHAR_0,			30;
CONSTANT CHAR_1,			31;
CONSTANT CHAR_2,			32;
CONSTANT CHAR_3,			33;
CONSTANT CHAR_4,			34;
CONSTANT CHAR_5,			35;
CONSTANT CHAR_6,			36;
CONSTANT CHAR_7,			37;
CONSTANT CHAR_8,			38;
CONSTANT CHAR_9,			39;
CONSTANT CHAR_doublepoint,	3A;
CONSTANT CHAR_commapoint,	3B;
CONSTANT CHAR_A,			41;
CONSTANT CHAR_B,			42;
CONSTANT CHAR_C,			43;
CONSTANT CHAR_D,			44;
CONSTANT CHAR_E,			45;
CONSTANT CHAR_F,			46;
CONSTANT CHAR_G,			47;
CONSTANT CHAR_H,			48;
CONSTANT CHAR_I,			49;
CONSTANT CHAR_J,			4A;
CONSTANT CHAR_K,			4B;
CONSTANT CHAR_L,			4C;
CONSTANT CHAR_M,			4D;
CONSTANT CHAR_N,			4E;
CONSTANT CHAR_O,			4F;
CONSTANT CHAR_P,			50;
CONSTANT CHAR_Q,			51;
CONSTANT CHAR_R,			52;
CONSTANT CHAR_S,			53;
CONSTANT CHAR_T,			54;
CONSTANT CHAR_U,			55;
CONSTANT CHAR_V,			56;
CONSTANT CHAR_W,			57;
CONSTANT CHAR_X,			58;
CONSTANT CHAR_Y,			59;
CONSTANT CHAR_Z,			5A;
CONSTANT CHAR_a,			61;
CONSTANT CHAR_b,			62;
CONSTANT CHAR_c,			63;
CONSTANT CHAR_d,			64;
CONSTANT CHAR_e,			65;
CONSTANT CHAR_f,			66;
CONSTANT CHAR_g,			67;
CONSTANT CHAR_h,			68;
CONSTANT CHAR_i,			69;
CONSTANT CHAR_j,			6A;
CONSTANT CHAR_k,			6B;
CONSTANT CHAR_l,			6C;
CONSTANT CHAR_m,			6D;
CONSTANT CHAR_n,			6E;
CONSTANT CHAR_o,			6F;
CONSTANT CHAR_p,			70;
CONSTANT CHAR_q,			71;
CONSTANT CHAR_r,			72;
CONSTANT CHAR_s,			73;
CONSTANT CHAR_t,			74;
CONSTANT CHAR_u,			75;
CONSTANT CHAR_v,			76;
CONSTANT CHAR_w,			77;
CONSTANT CHAR_x,			78;
CONSTANT CHAR_y,			79;
CONSTANT CHAR_z,			7A;
CONSTANT CHAR_DEL,			7F;





;Label de chacun des registres
NAMEREG s0,REG_A
NAMEREG s1,REG_B

NAMEREG s2,REG_TEST
NAMEREG s3,REG_STATUS
NAMEREG s4,REG_HOUR
NAMEREG s5,REG_MINUTES
NAMEREG s6,REG_FLAGS
NAMEREG s7,REG_DMONTH
NAMEREG s8,REG_DWEEK
NAMEREG s9,REG_MONTH
NAMEREG sA,REG_YEAR
NAMEREG sB,REG_Int
NAMEREG sC,REG_TEMP



;Déclarations des variables

;Programme principal

;Initialisation
init : 

	  ;Autorisation des enables
	  ENABLE INTERRUPT 
	  INPUT REG_TEST,M_TEST
	  
	  ;Point 1
	  LOAD REG_TEMP,01
	  OUTPUT REG_TEMP,DSP_DEBUG;
	
	  TEST REG_TEST,01
	  JUMP NZ,prescaler_t
	  JUMP prescaler_n
	  
prescaler_t:
	
	  ;Point 2
	  LOAD REG_TEMP,02
	  OUTPUT REG_TEMP,DSP_DEBUG;
	
	  ;Prescaler à la valeur  4 
	  LOAD 		REG_A,04
	  OUTPUT 	REG_A,DCF_PRSCL ;
	  LOAD 		REG_A,00
	  OUTPUT 	REG_A,DCF_PRSCH ;
	  JUMP loop

prescaler_n:
	
	  ;Point 3
	  LOAD REG_TEMP,03
	  OUTPUT REG_TEMP,DSP_DEBUG;
	
	  ;Prescaler à la valeur 40'000
	  LOAD 		REG_A,40
	  OUTPUT 	REG_A,DCF_PRSCL
	  LOAD 		REG_A,9C
	  OUTPUT 	REG_A,DCF_PRSCH
	  JUMP loop

	  
	  
loop:
		
	  ;Point 5
	  LOAD REG_TEMP,05
	  OUTPUT REG_TEMP,DSP_DEBUG;
	
	  ;Affichage du bitcount
	  INPUT REG_A,DCF_BITCOUNT
	  OUTPUT REG_A,DSP_BCOUNT
	  
	  ;Envoi du Status
	  INPUT REG_A,DCF_STATUS
	  OUTPUT REG_A,DSP_STATUS
	  
	  
	  ;Vérification si l'interruption à eu lieu
	  TEST REG_Int,01
	  JUMP NZ,send_uart
	  JUMP loop
	  
send_uart:
	  
	  
	  ;"HEURE : "
	  LOAD 	 REG_B,CHAR_H;
	  CALL   send_to_UART;
	  
	  LOAD   REG_B,CHAR_E;
	  CALL   send_to_UART;
	  
	  LOAD   REG_B,CHAR_U;
	  CALL   send_to_UART;
	 
	  LOAD 	 REG_B,CHAR_R;
	  CALL   send_to_UART;
	
	  LOAD 	 REG_B,CHAR_E;
	  CALL   send_to_UART;
	
	  LOAD   REG_B,CHAR_SPC;
	  CALL   send_to_UART;
	
	  LOAD   REG_B,CHAR_doublepoint;
	  CALL   send_to_UART;
	
	  LOAD   REG_B,CHAR_SPC;
	  CALL   send_to_UART;
	
	  ;ENVOI DE L'HEURE
	  
	  ;PREMIER DIGIT
	  LOAD REG_A,REG_HOUR;
	  AND REG_A,F0;
	  
	  ;On shifte de quatre direction la droite
	  SR0 REG_A;
	  SR0 REG_A;
	  SR0 REG_A;
	  SR0 REG_A;
	  
	  CALL bcd_to_ascii;
	  CALL   send_to_UART;
	
	  ;SECOND DIGIT
	  LOAD REG_A,REG_HOUR;
	  AND REG_A,0F;
	  CALL bcd_to_ascii;
	  CALL   send_to_UART;
	
	  ;ESPACE 
	  LOAD   REG_B,CHAR_SPC;
	  CALL   send_to_UART;
	  ;CARACTERE H
	  LOAD   REG_B,CHAR_H;
	  CALL   send_to_UART;
	  ;ESPACE 
	  LOAD   REG_B,CHAR_SPC;
	  CALL   send_to_UART;
	
	  ;MINUTES
	  
	  ;PREMIER DIGIT
	  LOAD REG_A,REG_MINUTES;
	  AND REG_A,F0;
	  
	  ;On shifte de quatre direction la droite
	  SR0 REG_A;
	  SR0 REG_A;
	  SR0 REG_A;
	  SR0 REG_A;
	  
	  CALL bcd_to_ascii;
	  CALL   send_to_UART;
	
	  ;SECOND DIGIT
	  LOAD REG_A,REG_MINUTES;
	  AND REG_A,0F;
	  CALL bcd_to_ascii;
	  CALL   send_to_UART ;

	  ;ESPACE 
	  LOAD   REG_B,CHAR_SPC;
	  CALL   send_to_UART;

	  ;Jour
	  LOAD REG_A,REG_DWEEK
	  CALL day_to_ascii

	  ;ESPACE 
	  LOAD   REG_B,CHAR_SPC;
	  CALL   send_to_UART;
	  
	  ;envoi de la DATE
	  	  
	  ;PREMIER DIGIT
	  LOAD REG_A,REG_DMONTH;
	  AND REG_A,F0;
	  
	  ;On shifte de quatre direction la droite
	  SR0 REG_A;
	  SR0 REG_A;
	  SR0 REG_A;
	  SR0 REG_A;
	  
	  CALL bcd_to_ascii;
	  CALL send_to_UART;
	
	  ;SECOND DIGIT
	  LOAD REG_A,REG_DMONTH;
	  AND REG_A,0F;
	  CALL bcd_to_ascii;
	  CALL send_to_UART;
	
	  ;POINT
	  LOAD   REG_B,CHAR_POINT;
	  CALL   send_to_UART;
	  
	  ;Numéro du mois
	  
	  ;PREMIER DIGIT
	  LOAD REG_A,REG_MONTH;
	  AND REG_A,F0;
	  
	  ;On shifte de quatre direction la droite
	  SR0 REG_A;
	  SR0 REG_A;
	  SR0 REG_A;
	  SR0 REG_A;
	  
	  CALL bcd_to_ascii;
	  CALL send_to_UART;
	
	  ;SECOND DIGIT
	  LOAD REG_A,REG_MONTH;
	  AND REG_A,0F;
	  CALL bcd_to_ascii;
	  CALL send_to_UART;
	
	  ;POINT
	  LOAD   REG_B,CHAR_POINT;
	  CALL   send_to_UART;
	
	  ;Année
	  ;Envoi de 20xx
	  LOAD   REG_B,CHAR_2;
	  CALL   send_to_UART;
	  
	  LOAD   REG_B,CHAR_0;
	  CALL   send_to_UART;
	  
	  ;PREMIER DIGIT
	  LOAD REG_A,REG_YEAR;
	  AND REG_A,F0;
	  
	  ;On shifte de quatre direction la droite
	  SR0 REG_A;
	  SR0 REG_A;
	  SR0 REG_A;
	  SR0 REG_A;
	  
	  CALL bcd_to_ascii;
	  CALL send_to_UART;
	
	  ;SECOND DIGIT
	  LOAD REG_A,REG_YEAR;
	  AND REG_A,0F;
	  CALL bcd_to_ascii;
	  CALL send_to_UART;
	  
	  
	
	  LOAD REG_Int,00;
	  JUMP loop	

	  
	  ADDRESS 200	
;On utilise le REG_A pour le paramètre et le REG_B pour le résultat
bcd_to_ascii:
	  ;On compare le REG_A avec une valeur prédéfinie
	  COMPARE REG_A,00
	  JUMP Z,ascii_0
	  COMPARE REG_A,01
	  JUMP Z,ascii_1
	  COMPARE REG_A,02
	  JUMP Z,ascii_2
	  COMPARE REG_A,03
	  JUMP Z,ascii_3
	  COMPARE REG_A,04
	  JUMP Z,ascii_4
	  COMPARE REG_A,05
	  JUMP Z,ascii_5
	  COMPARE REG_A,06
	  JUMP Z,ascii_6
	  COMPARE REG_A,07
	  JUMP Z,ascii_7
	  COMPARE REG_A,08
	  JUMP Z,ascii_8
	  COMPARE REG_A,09
	  JUMP Z,ascii_9
	  
	  
ascii_0:
  LOAD REG_B,CHAR_0;
RETURN	  
ascii_1:
  LOAD REG_B,CHAR_1;	  
RETURN	  
ascii_2:
  LOAD REG_B,CHAR_2;	  
RETURN
ascii_3:
  LOAD REG_B,CHAR_3;
RETURN
ascii_4:
  LOAD REG_B,CHAR_4;
RETURN  
ascii_5:
  LOAD REG_B,CHAR_5;
RETURN  
ascii_6:
  LOAD REG_B,CHAR_6;
RETURN  
ascii_7:
  LOAD REG_B,CHAR_7;
RETURN  
ascii_8:
  LOAD REG_B,CHAR_8;
RETURN  
ascii_9:
  LOAD REG_B,CHAR_9;
RETURN  


JUMP init;

;On utilise le REG_A pour le paramètre et le REG_B pour le résultat
	 ADDRESS 240
day_to_ascii:
	  COMPARE REG_A,01
	  JUMP Z,ascii_lundi
	  COMPARE REG_A,02
	  JUMP Z,ascii_mardi
	  COMPARE REG_A,03
	  JUMP Z,ascii_mercredi
	  COMPARE REG_A,04
	  JUMP Z,ascii_jeudi
	  COMPARE REG_A,05
	  JUMP Z,ascii_vendredi
	  COMPARE REG_A,06
	  JUMP Z,ascii_samedi
	  COMPARE REG_A,07
	  JUMP Z,ascii_dimanche

ascii_lundi:
    LOAD REG_B,CHAR_L;
	CALL send_to_UART;
	LOAD REG_B,CHAR_U;
	CALL send_to_UART;
	LOAD REG_B,CHAR_N;
	CALL send_to_UART;
	LOAD REG_B,CHAR_D;
	CALL send_to_UART;
	LOAD REG_B,CHAR_I;
	CALL send_to_UART;

	RETURN
	
ascii_mardi:
    LOAD REG_B,CHAR_M;
	CALL send_to_UART;
	LOAD REG_B,CHAR_A;
	CALL send_to_UART;
	LOAD REG_B,CHAR_R;
	CALL send_to_UART;
	LOAD REG_B,CHAR_D;
	CALL send_to_UART;
	LOAD REG_B,CHAR_I;
	CALL send_to_UART;

	RETURN
	
ascii_mercredi:
    LOAD REG_B,CHAR_M;
	CALL send_to_UART;
	LOAD REG_B,CHAR_E;
	CALL send_to_UART;
	LOAD REG_B,CHAR_R;
	CALL send_to_UART;
	LOAD REG_B,CHAR_C;
	CALL send_to_UART;
	LOAD REG_B,CHAR_R;
	CALL send_to_UART;
	LOAD REG_B,CHAR_E;
	CALL send_to_UART;
	LOAD REG_B,CHAR_D;
	CALL send_to_UART;
	LOAD REG_B,CHAR_I;
	CALL send_to_UART;

	RETURN

ascii_jeudi:
    LOAD REG_B,CHAR_J;
	CALL send_to_UART;
	LOAD REG_B,CHAR_E;
	CALL send_to_UART;
	LOAD REG_B,CHAR_U;
	CALL send_to_UART;
	LOAD REG_B,CHAR_D;
	CALL send_to_UART;
	LOAD REG_B,CHAR_I;
	CALL send_to_UART;

	RETURN
	
ascii_vendredi:
    LOAD REG_B,CHAR_V;
	CALL send_to_UART;
	LOAD REG_B,CHAR_E;
	CALL send_to_UART;
	LOAD REG_B,CHAR_N;
	CALL send_to_UART;
	LOAD REG_B,CHAR_D;
	CALL send_to_UART;
	LOAD REG_B,CHAR_R;
	CALL send_to_UART;
	LOAD REG_B,CHAR_E;
	CALL send_to_UART;
	LOAD REG_B,CHAR_D;
	CALL send_to_UART;
	LOAD REG_B,CHAR_I;
	CALL send_to_UART;

	RETURN

ascii_samedi:
	LOAD REG_B,CHAR_S;
	CALL send_to_UART;
	LOAD REG_B,CHAR_A;
	CALL send_to_UART;
	LOAD REG_B,CHAR_M;
	CALL send_to_UART;
	LOAD REG_B,CHAR_E;
	CALL send_to_UART;
	LOAD REG_B,CHAR_D;
	CALL send_to_UART;
	LOAD REG_B,CHAR_I;
	CALL send_to_UART;

	RETURN
	
ascii_dimanche:
	LOAD REG_B,CHAR_D;
	CALL send_to_UART;
	LOAD REG_B,CHAR_I;
	CALL send_to_UART;
	LOAD REG_B,CHAR_M;
	CALL send_to_UART;
	LOAD REG_B,CHAR_A;
	CALL send_to_UART;
	LOAD REG_B,CHAR_N;
	CALL send_to_UART;
	LOAD REG_B,CHAR_C;
	CALL send_to_UART;
	LOAD REG_B,CHAR_H;
	CALL send_to_UART;
	LOAD REG_B,CHAR_E;
	CALL send_to_UART;

	RETURN
		
	 
	 
	 
	 ADDRESS 2F0
send_to_UART: 
  INPUT REG_TEST, M_BUFULL;
  TEST REG_TEST,01;
  JUMP NZ, send_to_UART
  JUMP UART_write
UART_write: 
  OUTPUT REG_B, UART_ENABLE
  RETURN
	 
	 ADDRESS 300
int_routine:

	;Point 4
	LOAD   REG_TEMP,04
	OUTPUT REG_TEMP,DSP_DEBUG;
	

	;Récupération de l'heure et des minutes
	INPUT REG_HOUR,DCF_HOUR
	INPUT REG_MINUTES,DCF_MINUTES
	INPUT REG_STATUS,DCF_STATUS
	INPUT REG_FLAGS,DCF_FLAGS
	INPUT REG_DMONTH,DCF_DMONTH
	INPUT REG_DWEEK,DCF_DWEEK
	INPUT REG_MONTH,DCF_MYEAR
	INPUT REG_YEAR,DCF_YEAR
	
	OUTPUT REG_HOUR,DSP_HOUR;
	OUTPUT REG_MINUTES,DSP_MIN;
	OUTPUT REG_STATUS,DSP_STATUS;
		
	LOAD REG_Int,01;
	
	
	RETURNI ENABLE;

ADDRESS 3FF
		JUMP int_routine